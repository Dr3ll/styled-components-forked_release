{"version":3,"file":"styled-components.native.cjs.js","sources":["../../src/constants.js","../../src/sheet/Tag.js","../../src/sheet/GroupedTag.js","../../src/sheet/GroupIDAllocator.js","../../src/sheet/Sheet.js","../../src/models/InlineStyle.js"],"sourcesContent":["// @flow\r\n\r\ndeclare var SC_DISABLE_SPEEDY: ?boolean;\r\ndeclare var __VERSION__: string;\r\n\r\nexport const SC_ATTR =\r\n  (typeof process !== 'undefined' && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR)) ||\r\n  'data-styled';\r\n\r\nexport const SC_ATTR_ACTIVE = 'active';\r\nexport const SC_ATTR_VERSION = 'data-styled-version';\r\nexport const SC_VERSION = __VERSION__;\r\nexport const SPLITTER = '/*!sc*/\\n';\r\n\r\nexport const IS_BROWSER = typeof window !== 'undefined' && 'HTMLElement' in window;\r\n\r\nexport const DISABLE_SPEEDY =\r\n  (typeof SC_DISABLE_SPEEDY === 'boolean' && SC_DISABLE_SPEEDY) ||\r\n  (typeof process !== 'undefined' &&\r\n    (process.env.REACT_APP_SC_DISABLE_SPEEDY || process.env.SC_DISABLE_SPEEDY)) ||\r\n  process.env.NODE_ENV !== 'production';\r\n\r\n// Shared empty execution context when generating static styles\r\nexport const STATIC_EXECUTION_CONTEXT = {};\r\n","// @flow\r\n/* eslint-disable no-use-before-define */\r\n\r\nimport { makeStyleTag, getSheet } from './dom';\r\nimport type { SheetOptions, Tag } from './types';\r\n\r\n/** Create a CSSStyleSheet-like tag depending on the environment */\r\nexport const makeTag = ({ isServer, useCSSOMInjection, target }: SheetOptions): Tag => {\r\n  if (isServer) {\r\n    return new VirtualTag(target);\r\n  } else if (useCSSOMInjection) {\r\n    return new CSSOMTag(target);\r\n  } else {\r\n    return new TextTag(target);\r\n  }\r\n};\r\n\r\nexport class CSSOMTag implements Tag {\r\n  element: HTMLStyleElement;\r\n\r\n  sheet: CSSStyleSheet;\r\n\r\n  length: number;\r\n\r\n  constructor(target?: HTMLElement) {\r\n    const element = (this.element = makeStyleTag(target));\r\n\r\n    // Avoid Edge bug where empty style elements don't create sheets\r\n    element.appendChild(document.createTextNode(''));\r\n\r\n    this.sheet = getSheet(element);\r\n    this.length = 0;\r\n  }\r\n\r\n  insertRule(index: number, rule: string): boolean {\r\n    try {\r\n      this.sheet.insertRule(rule, index);\r\n      this.length++;\r\n      return true;\r\n    } catch (_error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  deleteRule(index: number): void {\r\n    this.sheet.deleteRule(index);\r\n    this.length--;\r\n  }\r\n\r\n  getRule(index: number): string {\r\n    const rule = this.sheet.cssRules[index];\r\n    // Avoid IE11 quirk where cssText is inaccessible on some invalid rules\r\n    if (rule !== undefined && typeof rule.cssText === 'string') {\r\n      return rule.cssText;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n\r\n/** A Tag that emulates the CSSStyleSheet API but uses text nodes */\r\nexport class TextTag implements Tag {\r\n  element: HTMLStyleElement;\r\n\r\n  nodes: NodeList<Node>;\r\n\r\n  length: number;\r\n\r\n  constructor(target?: HTMLElement) {\r\n    const element = (this.element = makeStyleTag(target));\r\n    this.nodes = element.childNodes;\r\n    this.length = 0;\r\n  }\r\n\r\n  insertRule(index: number, rule: string): boolean {\r\n    if (index <= this.length && index >= 0) {\r\n      const node = document.createTextNode(rule);\r\n      const refNode = this.nodes[index];\r\n      this.element.insertBefore(node, refNode || null);\r\n      this.length++;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  deleteRule(index: number): void {\r\n    this.element.removeChild(this.nodes[index]);\r\n    this.length--;\r\n  }\r\n\r\n  getRule(index: number): string {\r\n    if (index < this.length) {\r\n      return this.nodes[index].textContent;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n\r\n/** A completely virtual (server-side) Tag that doesn't manipulate the DOM */\r\nexport class VirtualTag implements Tag {\r\n  rules: string[];\r\n\r\n  length: number;\r\n\r\n  constructor(_target?: HTMLElement) {\r\n    this.rules = [];\r\n    this.length = 0;\r\n  }\r\n\r\n  insertRule(index: number, rule: string): boolean {\r\n    if (index <= this.length) {\r\n      this.rules.splice(index, 0, rule);\r\n      this.length++;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  deleteRule(index: number): void {\r\n    this.rules.splice(index, 1);\r\n    this.length--;\r\n  }\r\n\r\n  getRule(index: number): string {\r\n    if (index < this.length) {\r\n      return this.rules[index];\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n","// @flow\r\n/* eslint-disable no-use-before-define */\r\n\r\nimport type { GroupedTag, Tag } from './types';\r\nimport { SPLITTER } from '../constants';\r\nimport throwStyledError from '../utils/error';\r\n\r\n/** Create a GroupedTag with an underlying Tag implementation */\r\nexport const makeGroupedTag = (tag: Tag): GroupedTag => {\r\n  return new DefaultGroupedTag(tag);\r\n};\r\n\r\nconst BASE_SIZE = 1 << 9;\r\n\r\nclass DefaultGroupedTag implements GroupedTag {\r\n  groupSizes: Uint32Array;\r\n\r\n  length: number;\r\n\r\n  tag: Tag;\r\n\r\n  constructor(tag: Tag) {\r\n    this.groupSizes = new Uint32Array(BASE_SIZE);\r\n    this.length = BASE_SIZE;\r\n    this.tag = tag;\r\n  }\r\n\r\n  indexOfGroup(group: number): number {\r\n    let index = 0;\r\n    for (let i = 0; i < group; i++) {\r\n      index += this.groupSizes[i];\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  insertRules(group: number, rules: string[]): void {\r\n    if (group >= this.groupSizes.length) {\r\n      const oldBuffer = this.groupSizes;\r\n      const oldSize = oldBuffer.length;\r\n\r\n      let newSize = oldSize;\r\n      while (group >= newSize) {\r\n        newSize <<= 1;\r\n        if (newSize < 0) {\r\n          throwStyledError(16, `${group}`);\r\n        }\r\n      }\r\n\r\n      this.groupSizes = new Uint32Array(newSize);\r\n      this.groupSizes.set(oldBuffer);\r\n      this.length = newSize;\r\n\r\n      for (let i = oldSize; i < newSize; i++) {\r\n        this.groupSizes[i] = 0;\r\n      }\r\n    }\r\n\r\n    let ruleIndex = this.indexOfGroup(group + 1);\r\n    for (let i = 0, l = rules.length; i < l; i++) {\r\n      if (this.tag.insertRule(ruleIndex, rules[i])) {\r\n        this.groupSizes[group]++;\r\n        ruleIndex++;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearGroup(group: number): void {\r\n    if (group < this.length) {\r\n      const length = this.groupSizes[group];\r\n      const startIndex = this.indexOfGroup(group);\r\n      const endIndex = startIndex + length;\r\n\r\n      this.groupSizes[group] = 0;\r\n\r\n      for (let i = startIndex; i < endIndex; i++) {\r\n        this.tag.deleteRule(startIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  getGroup(group: number): string {\r\n    let css = '';\r\n    if (group >= this.length || this.groupSizes[group] === 0) {\r\n      return css;\r\n    }\r\n\r\n    const length = this.groupSizes[group];\r\n    const startIndex = this.indexOfGroup(group);\r\n    const endIndex = startIndex + length;\r\n\r\n    for (let i = startIndex; i < endIndex; i++) {\r\n      css += `${this.tag.getRule(i)}${SPLITTER}`;\r\n    }\r\n\r\n    return css;\r\n  }\r\n}\r\n","// @flow\r\n\r\nimport throwStyledError from '../utils/error';\r\n\r\nconst MAX_SMI = 1 << 31 - 1;\r\n\r\nlet groupIDRegister: Map<string, number> = new Map();\r\nlet reverseRegister: Map<number, string> = new Map();\r\nlet nextFreeGroup = 1;\r\n\r\nexport const resetGroupIds = () => {\r\n  groupIDRegister = new Map();\r\n  reverseRegister = new Map();\r\n  nextFreeGroup = 1;\r\n};\r\n\r\nexport const getGroupForId = (id: string): number => {\r\n  if (groupIDRegister.has(id)) {\r\n    return (groupIDRegister.get(id): any);\r\n  }\r\n\r\n  const group = nextFreeGroup++;\r\n  if (\r\n    process.env.NODE_ENV !== 'production' &&\r\n    ((group | 0) < 0 || group > MAX_SMI)\r\n  ) {\r\n    throwStyledError(16, `${group}`);\r\n  }\r\n\r\n  groupIDRegister.set(id, group);\r\n  reverseRegister.set(group, id);\r\n\r\n  return group;\r\n};\r\n\r\nexport const getIdForGroup = (group: number): void | string => {\r\n  return reverseRegister.get(group);\r\n};\r\n\r\nexport const setGroupForId = (id: string, group: number) => {\r\n  if (group >= nextFreeGroup) {\r\n    nextFreeGroup = group + 1;\r\n  }\r\n\r\n  groupIDRegister.set(id, group);\r\n  reverseRegister.set(group, id);\r\n};\r\n","// @flow\r\nimport { DISABLE_SPEEDY, IS_BROWSER } from '../constants';\r\nimport type { GroupedTag, Sheet, SheetOptions } from './types';\r\nimport { makeTag } from './Tag';\r\nimport { makeGroupedTag } from './GroupedTag';\r\nimport { getGroupForId } from './GroupIDAllocator';\r\nimport { outputSheet, rehydrateSheet } from './Rehydration';\r\n\r\nlet SHOULD_REHYDRATE = IS_BROWSER;\r\n\r\ntype SheetConstructorArgs = {\r\n  isServer?: boolean,\r\n  useCSSOMInjection?: boolean,\r\n  target?: HTMLElement,\r\n};\r\n\r\ntype GlobalStylesAllocationMap = { [key: string]: number };\r\ntype NamesAllocationMap = Map<string, Set<string>>;\r\n\r\nconst defaultOptions = {\r\n  isServer: !IS_BROWSER,\r\n  useCSSOMInjection: !DISABLE_SPEEDY,\r\n};\r\n\r\n/** Contains the main stylesheet logic for stringification and caching */\r\nexport default class StyleSheet implements Sheet {\r\n  gs: GlobalStylesAllocationMap;\r\n\r\n  names: NamesAllocationMap;\r\n\r\n  options: SheetOptions;\r\n\r\n  tag: void | GroupedTag;\r\n\r\n  /** Register a group ID to give it an index */\r\n  static registerId(id: string): number {\r\n    return getGroupForId(id);\r\n  }\r\n\r\n  constructor(\r\n    options: SheetConstructorArgs = defaultOptions,\r\n    globalStyles?: GlobalStylesAllocationMap = {},\r\n    names?: NamesAllocationMap\r\n  ) {\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options,\r\n    };\r\n\r\n    this.gs = globalStyles;\r\n    this.names = new Map(names);\r\n\r\n    // We rehydrate only once and use the sheet that is created first\r\n    if (!this.options.isServer && IS_BROWSER && SHOULD_REHYDRATE) {\r\n      SHOULD_REHYDRATE = false;\r\n      rehydrateSheet(this);\r\n    }\r\n  }\r\n\r\n  reconstructWithOptions(options: SheetConstructorArgs) {\r\n    return new StyleSheet({ ...this.options, ...options }, this.gs, this.names);\r\n  }\r\n\r\n  allocateGSInstance(id: string) {\r\n    return (this.gs[id] = (this.gs[id] || 0) + 1);\r\n  }\r\n\r\n  /** Lazily initialises a GroupedTag for when it's actually needed */\r\n  getTag(): GroupedTag {\r\n    return this.tag || (this.tag = makeGroupedTag(makeTag(this.options)));\r\n  }\r\n\r\n  /** Check whether a name is known for caching */\r\n  hasNameForId(id: string, name: string): boolean {\r\n    return this.names.has(id) && (this.names.get(id): any).has(name);\r\n  }\r\n\r\n  /** Mark a group's name as known for caching */\r\n  registerName(id: string, name: string) {\r\n    getGroupForId(id);\r\n\r\n    if (!this.names.has(id)) {\r\n      const groupNames = new Set();\r\n      groupNames.add(name);\r\n      this.names.set(id, groupNames);\r\n    } else {\r\n      (this.names.get(id): any).add(name);\r\n    }\r\n  }\r\n\r\n  /** Insert new rules which also marks the name as known */\r\n  insertRules(id: string, name: string, rules: string[]) {\r\n    this.registerName(id, name);\r\n    this.getTag().insertRules(getGroupForId(id), rules);\r\n  }\r\n\r\n  /** Clears all cached names for a given group ID */\r\n  clearNames(id: string) {\r\n    if (this.names.has(id)) {\r\n      (this.names.get(id): any).clear();\r\n    }\r\n  }\r\n\r\n  /** Clears all rules for a given group ID */\r\n  clearRules(id: string) {\r\n    this.getTag().clearGroup(getGroupForId(id));\r\n    this.clearNames(id);\r\n  }\r\n\r\n  /** Clears the entire tag which deletes all rules but not its names */\r\n  clearTag() {\r\n    // NOTE: This does not clear the names, since it's only used during SSR\r\n    // so that we can continuously output only new rules\r\n    this.tag = undefined;\r\n  }\r\n\r\n  /** Outputs the current sheet as a CSS string with markers for SSR */\r\n  toString(): string {\r\n    return outputSheet(this);\r\n  }\r\n}\r\n","// @flow\r\n/* eslint-disable import/no-unresolved */\r\nimport transformDeclPairs from 'css-to-react-native';\r\n\r\nimport generateComponentId from '../utils/generateComponentId';\r\nimport type { RuleSet, StyleSheet } from '../types';\r\nimport flatten from '../utils/flatten';\r\n// $FlowFixMe\r\nimport parse from '../vendor/postcss-safe-parser/parse';\r\n\r\nlet generated = {};\r\n\r\nexport const resetStyleCache = () => {\r\n  generated = {};\r\n};\r\n\r\n/*\r\n InlineStyle takes arbitrary CSS and generates a flat object\r\n */\r\nexport default (styleSheet: StyleSheet) => {\r\n  class InlineStyle {\r\n    rules: RuleSet;\r\n\r\n    constructor(rules: RuleSet) {\r\n      this.rules = rules;\r\n    }\r\n\r\n    generateStyleObject(executionContext: Object) {\r\n      const flatCSS = flatten(this.rules, executionContext).join('');\r\n\r\n      const hash = generateComponentId(flatCSS);\r\n      if (!generated[hash]) {\r\n        const root = parse(flatCSS);\r\n        const declPairs = [];\r\n        root.each(node => {\r\n          if (node.type === 'decl') {\r\n            declPairs.push([node.prop, node.value]);\r\n          } else if (process.env.NODE_ENV !== 'production' && node.type !== 'comment') {\r\n            /* eslint-disable no-console */\r\n            console.warn(`Node of type ${node.type} not supported as an inline style`);\r\n          }\r\n        });\r\n        // RN currently does not support differing values for the corner radii of Image\r\n        // components (but does for View). It is almost impossible to tell whether we'll have\r\n        // support, so we'll just disable multiple values here.\r\n        // https://github.com/styled-components/css-to-react-native/issues/11\r\n        const styleObject = transformDeclPairs(declPairs, [\r\n          'borderRadius',\r\n          'borderWidth',\r\n          'borderColor',\r\n          'borderStyle',\r\n        ]);\r\n        const styles = styleSheet.create({\r\n          generated: styleObject,\r\n        });\r\n        generated[hash] = styles.generated;\r\n      }\r\n      return generated[hash];\r\n    }\r\n  }\r\n\r\n  return InlineStyle;\r\n};\r\n"],"names":["nodes","insertRule","names","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiB9B,0BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAyC8B;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAyBNA;;;;;;;;;;;;;;;;;;;;UAgBxBC,aAAA,yBAAA,MAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrFA,gCAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBCXiB;mBACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmBjB;;;;;;;;;;;;;;;;SAgBQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBA+B8BC;;;;;;;;;;;;;;;;;;;;qBAktE1B,8BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}